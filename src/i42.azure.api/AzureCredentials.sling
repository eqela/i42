
/*
 * This file is part of i42
 * Copyright (c) 2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jwt
import jk.log

class:

prop tenantId as string
prop clientId as string
prop clientSecret as string

var credentialsValue as dynamic

func getCredentialsObject as dynamic
{
    if not credentialsValue {
        var azureIdentity = AzureApi.getIdentityApi()
        if String.isNotEmpty(tenantId) && String.isNotEmpty(clientId) {
            var tenant = tenantId
            var id = clientId
            var secret = clientSecret
            credentialsValue = lang "js" dynamic {{{ new azureIdentity.ClientSecretCredential(tenant, id, secret) }}}
        }
        else {
            credentialsValue = lang "js" dynamic {{{ new azureIdentity.DefaultAzureCredential() }}}
        }
    }
    return credentialsValue
}

func getCurrentUserObjectId async as string
{
	var token = await getCredentialsObject().getToken("https://graph.microsoft.com/.default")
	var tokenString = token.token as! string
	var jwt = JWT.decode(tokenString, null)
	return jwt.getClaim("oid")
}

func getTokenString(url as string) async as string
{
	var token = await getCredentialsObject().getToken(url)
	var tokenString = token.token as! string
	return tokenString
}
