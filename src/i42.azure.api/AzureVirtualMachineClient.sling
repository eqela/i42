
/*
 * This file is part of i42
 * Copyright (c) 2022-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.base64

class is AzureClient:

model VirtualMachineProperties public
{
	name as string
	hostname as string
	nicId as string
	configureScript as string
	adminUsername as string
	adminPassword as string
	sshPublicKey as string
	vmType as string
	vmImage as string
	storageSizeGB as int
}

func updateVirtualMachine(properties as VirtualMachineProperties) async as dynamic
{
	var client = AzureApi.getComputeManagementClient(context)
	var osProfile = {
		adminUsername String.isEmpty(properties.adminUsername) ? "vmuser" : properties.adminUsername
		adminPassword properties.adminPassword
		computerName String.isEmpty(properties.hostname) ? properties.name : properties.hostname
		linuxConfiguration {
			disablePasswordAuthentication String.isEmpty(properties.adminPassword) ? true : false
		}
	}
	if String.isNotEmpty(properties.sshPublicKey) {
		osProfile.ssh = {
			publicKeys [
				{
					keyData properties.sshPublicKey
				}
			]
		}
	}
	var vmType = properties.vmType
	if String.isEmpty(vmType):
		vmType = "Standard_B2s"
	var vmImage = properties.vmImage
	if String.isEmpty(vmImage):
		vmImage = "Canonical:0001-com-ubuntu-server-focal:20_04-lts:latest"
	var vmImageComps = String.split(vmImage, ':')
	var vmPublisher = Vector.get(vmImageComps, 0)
	var vmOffer = Vector.get(vmImageComps, 1)
	var vmSku = Vector.get(vmImageComps, 2)
	var vmVersion = Vector.get(vmImageComps, 3)
	if String.isNotEmpty(properties.configureScript):
		osProfile.customData = Base64Encoder.encodeString(properties.configureScript)
	var storage = properties.storageSizeGB
	if storage < 30:
		storage = 30
	var params = {
		location context.location
		osProfile osProfile
		hardwareProfile {
			vmSize vmType
		}
		storageProfile {
			imageReference {
				offer vmOffer
				sku vmSku
				publisher vmPublisher
				version vmVersion
			}
			osDisk {
				name properties.name .. "-osdisk"
				caching "None"
				createOption "FromImage"
				deleteOption "Delete"
				diskSizeGB storage
				// encryptionSettings
				managedDisk {
					storageAccountType "Standard_LRS"
				}
			}
		}
		diagnosticsProfile {
			bootDiagnostics {
				enabled true
			}
		}
	}
	if String.isNotEmpty(properties.nicId) {
		params.networkProfile = {
			networkInterfaces [
				{
					id properties.nicId
				}
			]
		}
	}
	return await executeUpdate("Virtual Machine", func async as dynamic {
		await client.virtualMachines.beginCreateOrUpdateAndWait(context.resourceGroup, properties.name, params)
		return await client.virtualMachines.get(context.resourceGroup, properties.name)
	})
}

func getVirtualMachine(vmName as string) async as dynamic
{
	return await executeQuery("Get virtual machine `" .. vmName .. "'", func async as dynamic {
		var client = AzureApi.getComputeManagementClient(context)
		return await client.virtualMachines.get(context.resourceGroup, vmName)
	})
}

func deleteVirtualMachine(vmName as string) async
{
	await executeUpdate("Delete virtual machine `" .. vmName .. "'", func async as dynamic {
		var client = AzureApi.getComputeManagementClient(context)
		await client.virtualMachines.beginDeleteAndWait(context.resourceGroup, vmName)
		return null
	})
}
