
/*
 * This file is part of i42
 * Copyright (c) 2022-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sha
import jk.time
import jk.random

class is AzureClient:

model FrontendProperties public
{
	name as string
	hostName as string
}

model HealthProbeProperties public
{
	name as string
	path as string
	protocol as string
	method as string
	interval as int
}

model BackendProperties public
{
	name as string
	address as string
	hostHeader as string
	healthProbeName as string
}

model PathPrefixRoutingRuleProperties public
{
	name as string
	frontendName as string
	backendName as string
	pathPrefix as string
}

model FrontDoorProperties public
{
	name as string
	healthProbes as HealthProbeProperties[]
	frontends as FrontendProperties[]
	backends as BackendProperties[]
	pathPrefixRoutingRules as PathPrefixRoutingRuleProperties[]
}

func tryGetFrontDoor(name as string) async as dynamic
{
	var client = AzureApi.getFrontDoorManagementClient(context)
	if String.isEmpty(name) {
		var list = await client.frontDoors.listByResourceGroup(context.resourceGroup)
		if not list:
			return null
		var rr = await list.next()
		if not rr:
			return null
		return rr.value
	}
	try {
		return await client.frontDoors.get(context.resourceGroup, name)
	}
	catch e {
	}
	return null
}

func tryGetFrontDoorName async as string
{
	var v = await tryGetFrontDoor(null)
	if v:
		return String.asString(v.name)
	return null
}

func getFrontDoor(name as string) async as dynamic
{
	var v = await tryGetFrontDoor(name)
	if not v:
		Error.throw("failedToGetFrontDoor", name)
	return v
}

func getFrontDoorName async as string
{
	var v = await getFrontDoor(null)
	return String.asString(v.name)
}

func generateUniqueFrontDoorName async as string
{
	var v as string
	var client = AzureApi.getFrontDoorManagementClient(context)
	var n = 0
	loop {
		var seed = String.forLongInteger(SystemClock.asUTCSeconds()) .. String.forInteger(Random.getSharedInstance().nextInteger())
		v = String.getSubString(SHAEncoder.forSha1().getHashForString(seed), 0, 8) .. "fd"
		var r = await client.frontDoorNameAvailability.check({
			name v
			type "Microsoft.Network/frontDoors"
		})
		if r.nameAvailability == "Available":
			break
		n ++
		if n > 32:
			Error.throw("failedToGenerateUniqueFrontDoorName", null)
	}
	return v
}

func updateFrontDoor(properties as FrontDoorProperties) async as dynamic
{
	var name = properties.name
	if String.isEmpty(name) {
		name = String.asString(await executeQuery("Determine Front Door name", func async as dynamic {
			var v = await tryGetFrontDoorName()
			if String.isEmpty(v):
				v = await generateUniqueFrontDoorName()
			return v
		}))
	}
	var frontendEndpoints = []
	var healthProbeSettings = []
	var backendPools = []
	var routingRules = []
	healthProbeSettings += {
		name "HealthProbeDisabled"
		path "/"
		protocol "Https"
		healthProbeMethod "HEAD"
		intervalInSeconds 120
		enabledState "Disabled"
	}
	foreach healthProbe in properties.healthProbes {
		healthProbeSettings += {
			name healthProbe.name
			path healthProbe.path
			protocol healthProbe.protocol
			healthProbeMethod healthProbe.method
			intervalInSeconds healthProbe.interval
		}
	}
	foreach frontend in properties.frontends {
		if String.isEmpty(frontend.name):
			Error.throw("frontendHasNoName", frontend)
		var hostName = frontend.hostName
		if String.isEmpty(hostName):
			hostName = name
		if String.contains(hostName, ".") == false:
			hostName = hostName .. ".azurefd.net"
		frontendEndpoints += {
			name frontend.name
			hostName hostName
			sessionAffinityEnabledState "Disabled"
		}
	}
	foreach backend in properties.backends {
		var hbname = backend.healthProbeName
		if String.isEmpty(hbname):
			hbname = "HealthProbeDisabled"
		backendPools += {
			name backend.name
			backends [
				{
					address backend.address
					backendHostHeader String.isNotEmpty(backend.hostHeader) ? backend.hostHeader : backend.address
					httpPort 80
					httpsPort 443
					weight 100
					priority 1
					enabledState "Enabled"
				}
			]
			healthProbeSettings {
				id context.createResourceId("Microsoft.Network/frontDoors/" .. name .. "/healthProbeSettings", hbname)
			}
			loadBalancingSettings {
				id context.createResourceId("Microsoft.Network/frontDoors/" .. name .. "/loadBalancingSettings", "defaultLoadBalancingSettings")
			}
		}
	}
	foreach pathPrefixRoutingRule in properties.pathPrefixRoutingRules {
		var pp = pathPrefixRoutingRule.pathPrefix
		if String.endsWith(pp, "/") {
			pp = pp .. "*"
		}
		else {
			pp = pp .. "/*"
		}
		routingRules += {
			name pathPrefixRoutingRule.name
			acceptedProtocols [
				"Https"
			]
			enabledState "Enabled"
			frontendEndpoints [
				{
					id context.createResourceId("Microsoft.Network/frontDoors/" .. name .. "/frontEndEndpoints", pathPrefixRoutingRule.frontendName)
				}
			]
			patternsToMatch [
				pp
			]
			routeConfiguration {
					odataType "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"
					forwardingProtocol "MatchRequest"
					customForwardingPath "/"
					backendPool {
						id context.createResourceId("Microsoft.Network/frontDoors/" .. name .. "/backEndPools", pathPrefixRoutingRule.backendName)
					}
			}
		}
	}
	var frontendRefs = []
	foreach frontend in properties.frontends {
		frontendRefs += {
			id context.createResourceId("Microsoft.Network/frontDoors/" .. name .. "/frontEndEndpoints", frontend.name)
		}
	}
	routingRules += {
		name "HttpToHttpsRedirect"
		acceptedProtocols [
			"Http"
		]
		enabledState "Enabled"
		frontendEndpoints frontendRefs
		patternsToMatch [
			"/*"
		]
		routeConfiguration {
				odataType "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"
				redirectProtocol "HttpsOnly"
				redirectType "Found"
		}
	}
	var params = {
		location "global"
		loadBalancingSettings [
			{
				name "defaultLoadBalancingSettings"
				sampleSize 4
				successfulSamplesRequired 2
			}
		]
		frontendEndpoints frontendEndpoints
		healthProbeSettings healthProbeSettings
		backendPools backendPools
		routingRules routingRules
	}
	return await executeUpdate("Front Door", func async as dynamic {
		var client = AzureApi.getFrontDoorManagementClient(context)
		await client.frontDoors.beginCreateOrUpdateAndWait(context.resourceGroup, name, params)
		return await client.frontDoors.get(context.resourceGroup, name)
	})
}
