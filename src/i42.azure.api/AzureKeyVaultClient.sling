
/*
 * This file is part of i42
 * Copyright (c) 2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sha
import jk.log
import jk.time
import jk.random

class is AzureClient:

model KeyVaultProperties public
{
	name as string
	tenantId as string
	vnetName as string
	subnetName as string
	vnetAccessOnly as bool
}

func tryGetKeyVault(name as string) async as dynamic
{
	var kvClient = AzureApi.getKeyVaultManagementClient(context)
	if String.isEmpty(name) {
		var list = await kvClient.vaults.listByResourceGroup(context.resourceGroup)
		if not list:
			return null
		var rr = await list.next()
		if not rr:
			return null
		return rr.value
	}
	try {
		return await kvClient.vaults.get(context.resourceGroup, name)
	}
	catch e {
	}
	return null
}

func tryGetKeyVaultName async as string
{
	var v = await tryGetKeyVault(null)
	if v:
		return String.asString(v.name)
	return null
}

func getKeyVault(name as string) async as dynamic
{
	var v = await tryGetKeyVault(name)
	if not v:
		Error.throw("failedToGetKeyVault", name)
	return v
}

func getKeyVaultName async as string
{
	var v = await getKeyVault(null)
	return String.asString(v.name)
}

func generateUniqueKeyVaultName async as string
{
	var v as string
	var kvClient = AzureApi.getKeyVaultManagementClient(context)
	var n = 0
	loop {
		var seed = String.forLongInteger(SystemClock.asUTCSeconds()) .. String.forInteger(Random.getSharedInstance().nextInteger())
		v = String.getSubString(SHAEncoder.forSha1().getHashForString(seed), 0, 8) .. "kv"
		var r = await kvClient.vaults.checkNameAvailability({
			name v
			type "Microsoft.KeyVault/vaults"
		})
		if r.nameAvailable == true:
			break
		n ++
		if n > 32:
			Error.throw("failedToGenerateUniqueKeyVaultName", null)
	}
	return v
}

func updateKeyVault(properties as KeyVaultProperties) async as dynamic
{
	var name = properties.name
	if String.isEmpty(name) {
		name = String.asString(await executeQuery("Determine key vault name", func async as dynamic {
			var v as string
			var dcr = await tryGetKeyVault(null)
			if dcr:
				v = String.asString(dcr.name)
			if String.isEmpty(v):
				v = await generateUniqueKeyVaultName()
			return v
		}))
	}
	var params = {
		location context.location
		properties {
			tenantId properties.tenantId
			sku {
				family "A"
				name "Standard"
			}
			enableSoftDelete false
			enabledForDeployment true
			enabledForDiskEncryption true
			enabledForTemplateDeployment true
			publicNetworkAccess "enabled"
			accessPolicies [
			]
		}
	}
	if String.isNotEmpty(properties.vnetName) && String.isNotEmpty(properties.subnetName) && properties.vnetAccessOnly:
		params.properties.publicNetworkAccess = "disabled"
	var kvv = await executeUpdate("Key Vault", func async as dynamic {
		var kvClient = AzureApi.getKeyVaultManagementClient(context)
		await kvClient.vaults.beginCreateOrUpdateAndWait(context.resourceGroup, name, params)
		return await kvClient.vaults.get(context.resourceGroup, name)
	})
	if String.isNotEmpty(properties.vnetName) && String.isNotEmpty(properties.subnetName) {
		var networkClient = new AzureNetworkClient(ctx, context)
		var vnet = await networkClient.getVirtualNetwork(properties.vnetName)
		await networkClient.updatePrivateEndpoint(new AzureNetworkClient.PrivateEndpointProperties() {
			resourceId String.asString(kvv.id)
			vnetId String.asString(vnet.id)
			subnetName properties.subnetName
			resourceType AzureResourceType.KEY_VAULT
		})
	}
	return kvv
}

func addKeyVaultAccessPolicy(vaultName as string, tenantId as string, objectId as string, certificatePermissions as vector<string>, keyPermissions as vector<string>, secretPermissions as vector<string>, storagePermissions as vector<string>) async
{
	await executeUpdate("Key Vault Access Policy", func async as dynamic {
		var kvClient = AzureApi.getKeyVaultManagementClient(context)
		return await kvClient.vaults.updateAccessPolicy(context.resourceGroup, vaultName, "add", {
			properties {
				accessPolicies [
					{
						objectId objectId
						tenantId tenantId
						permissions {
							certificates certificatePermissions
							keys keyPermissions
							secrets secretPermissions
							storage storagePermissions
						}
					}
				]
			}
		})
	})
}

func removeKeyVaultAccessPolicy(vaultName as string, tenantId as string, objectId as string, certificatePermissions as vector<string>, keyPermissions as vector<string>, secretPermissions as vector<string>, storagePermissions as vector<string>) async
{
	await executeUpdate("Key Vault Access Policy", func async as dynamic {
		var kvClient = AzureApi.getKeyVaultManagementClient(context)
		return await kvClient.vaults.updateAccessPolicy(context.resourceGroup, vaultName, "remove", {
			properties {
				accessPolicies [
					{
						objectId objectId
						tenantId tenantId
						permissions {
							certificates certificatePermissions
							keys keyPermissions
							secrets secretPermissions
							storage storagePermissions
						}
					}
				]
			}
		})
	})
}

func tryGetSecretFromKeyVault(vaultName as string, secretName as string) async as string
{
	try {
		return await getSecretFromKeyVault(vaultName, secretName)
	}
	catch e {
	}
	return null
}

func asVaultUrl(name as string) as string
{
	if String.startsWith(name, "https://"):
		return name
	return "https://" .. name .. ".vault.azure.net"
}

func getSecretFromKeyVault(vaultName as string, secretName as string) async as string
{
	return String.asString(await executeQuery("Get secret `" .. secretName .. "'", func async as dynamic {
		var client = AzureApi.getKeyVaultSecretClient(context, asVaultUrl(vaultName))
		var v = await client.getSecret(secretName)
		if not v:
			Error.throw("secretNotFound", secretName)
		if not v.value:
			Error.throw("secretHasNoValue", secretName)
		return v.value
	}))
}

func updateSecretInKeyVault(vaultName as string, secretName as string, secretValue as string) async
{
	await executeUpdate("Set secret `" .. secretName .. "'", func async as dynamic {
		var client = AzureApi.getKeyVaultSecretClient(context, asVaultUrl(vaultName))
		await client.setSecret(secretName, secretValue)
		return null
	})
}

func generateRandomStringSecret(vaultName as string, secretName as string) async as string
{
	return null
}
