
/*
 * This file is part of i42
 * Copyright (c) 2022-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sha
import jk.time
import jk.random

class is AzureClient:

model StorageAccountProperties public
{
	name as string
	vnetId as string
	subnetName as string
	allowIpAddresses as string[]
	enableNfs as bool
}

func updatePublicContainer(storageAccountName as string, containerName as string) async as dynamic
{
	return await executeUpdate("Public Container", func async as dynamic {
		var client = AzureApi.getStorageManagementClient(context)
		return await client.blobContainers.create(context.resourceGroup, storageAccountName, containerName, {
			publicAccess "Container"
		})
	})
}

func updatePrivateContainer(storageAccountName as string, containerName as string) async as dynamic
{
	return await executeUpdate("Private Container", func async as dynamic {
		var client = AzureApi.getStorageManagementClient(context)
		return await client.blobContainers.create(context.resourceGroup, storageAccountName, containerName, {
			publicAccess "None"
		})
	})
}

func tryGetStorageAccount(name as string) async as dynamic
{
	var client = AzureApi.getStorageManagementClient(context)
	if String.isEmpty(name) {
		var list = await client.storageAccounts.listByResourceGroup(context.resourceGroup)
		if not list:
			return null
		var rr = await list.next()
		if not rr:
			return null
		return rr.value
	}
	try {
		return await client.storageAccounts.get(context.resourceGroup, name)
	}
	catch e {
	}
	return null
}

func tryGetStorageAccountName async as string
{
	var v = await tryGetStorageAccount(null)
	if v:
		return String.asString(v.name)
	return null
}

func getStorageAccount(name as string) async as dynamic
{
	var v = await tryGetStorageAccount(name)
	if not v:
		Error.throw("failedToGetStorageAccount", name)
	return v
}

func getStorageAccountName async as string
{
	var v = await getStorageAccount(null)
	return String.asString(v.name)
}

func generateUniqueStorageAccountName async as string
{
	var v as string
	var client = AzureApi.getStorageManagementClient(context)
	var n = 0
	loop {
		var seed = String.forLongInteger(SystemClock.asUTCSeconds()) .. String.forInteger(Random.getSharedInstance().nextInteger())
		v = String.getSubString(SHAEncoder.forSha1().getHashForString(seed), 0, 8) .. "st"
		var r = await client.storageAccounts.checkNameAvailability({
			name v
			type "Microsoft.Storage/storageAccounts"
		})
		if r.nameAvailable == true:
			break
		n ++
		if n > 32:
			Error.throw("failedToGenerateUniqueStorageAccountName", null)
	}
	return v
}

func getStorageAccountKeys(accountName as string) async as vector<string>
{
	var client = AzureApi.getStorageManagementClient(context)
	var keys = (await client.storageAccounts.listKeys(context.resourceGroup, accountName)).keys as! vector<dynamic>
	var v = new vector<string>
	foreach key in keys:
		v += String.asString(key.value)
	return v
}

func updateStorageAccount(properties as StorageAccountProperties) async as dynamic
{
	var name = properties.name
	if String.isEmpty(name) {
		name = String.asString(await executeQuery("Determine storage account name", func async as dynamic {
			var v as string
			var dcr = await tryGetStorageAccount(null)
			if dcr:
				v = String.asString(dcr.name)
			if String.isEmpty(v):
				v = await generateUniqueStorageAccountName()
			return v
		}))
	}
	var defaultNetworkAction = "Allow"
	if Vector.isNotEmpty(properties.allowIpAddresses) || String.isNotEmpty(properties.vnetId) || String.isNotEmpty(properties.subnetName):
		defaultNetworkAction = "Deny"
	var params = {
		location context.location
		sku {
			name "Standard_LRS"
		}
		kind "StorageV2"
		enableHttpsTrafficOnly true
		accessTier "Hot"
		networkRuleSet {
			defaultAction defaultNetworkAction
			ipRules [
			]
			resourceAccessRules [
			]
			virtualNetworkRules [
			]
		}
		minimumTlsVersion "TLS1_2"
		allowBlobPublicAccess true
		allowSharedKeyAccess true
		defaultToOAuthAuthentication false
		allowCrossTenantReplication true
	}
	if properties.enableNfs {
		params.enableNfsV3 = true
		params.isHnsEnabled = true
	}
	if Vector.isNotEmpty(properties.allowIpAddresses) {
		var myIpRules = []
		foreach ip in properties.allowIpAddresses {
			myIpRules += {
				iPAddressOrRange ip
				action "Allow"
			}
		}
		params.networkRuleSet.ipRules = myIpRules
	}
	var acctv = await executeUpdate("Storage account", func async as dynamic {
		var client = AzureApi.getStorageManagementClient(context)
		return await client.storageAccounts.beginCreateAndWait(context.resourceGroup, name, params)
	})
	if String.isNotEmpty(properties.vnetId) && String.isNotEmpty(properties.subnetName) {
		await new AzureNetworkClient(ctx, context).updatePrivateEndpoint(new AzureNetworkClient.PrivateEndpointProperties() {
			resourceId String.asString(acctv.id)
			vnetId properties.vnetId
			subnetName properties.subnetName
			resourceType AzureResourceType.STORAGE_ACCOUNT
		})
	}
	return acctv
}
