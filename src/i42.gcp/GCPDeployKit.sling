
/*
 * This file is part of i42
 * Copyright (c) 2022-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.mime

class is DeployFileHandler:

var ctx as LoggingContext
var serviceAccount as string
var bucketName as string
var prefix as string
var session as GCPSession
var storageApi as GCPStorageAPI

ctor(ctx as LoggingContext, serviceAccount as string, bucketName as string, prefix as string)
{
	this.ctx = ctx
	this.serviceAccount = serviceAccount
	this.bucketName = bucketName
	this.prefix = prefix
}

func getStorageApi async as GCPStorageAPI
{
	if not storageApi {
		if not session:
			session = await GCPSession.forServiceAccount(ctx, serviceAccount, [ GCPSession.SCOPE_READ_WRITE ])
		storageApi = new GCPStorageAPI(this.session)
	}
	return storageApi
}

func deployFile(file as File) async as string
{
	if not file:
		Error.throw("nullFile", null)
	var name = file.getBasename()
	if String.isEmpty(name):
		Error.throw("noFileName", file)
	if String.isNotEmpty(prefix):
		name = prefix .. name
	var data = file.getContentsBuffer()
	if not data:
		Error.throw("failedToRead", file)
	var exists = false
	var sapi = await getStorageApi()
	try {
		if sapi.getObjectMetadata(bucketName, name):
			exists = true
	}
	catch {
		nop
	}
	if exists:
		Error.throw("fileAlreadyExists", bucketName .. ":" .. name)
	var type = MimeTypeRegistry.getSharedInstance().getTypeForFile(file)
	var resource = await sapi.insertObject(bucketName, name, data, type)
	return resource.mediaLink
}
