
/*
 * This file is part of i42
 * Copyright (c) 2022-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class HostProxyRoute
{
	prop host as string
	prop backends as vector<string>

	func addToBackends(backend as string)
	{
		assert backend
		if not backends:
			backends = new vector<string>
		backends += backend
	}
}

class Frontend
{
	prop port as int
	prop certificatePath as string
	prop rules as vector<object>

	func addToRules(rule as object)
	{
		assert rule
		if not rules:
			rules = new vector<object>
		rules += rule
	}

	func addHostProxy(host as string, backends as array<string>) as HostProxyRoute
	{
		var v = new HostProxyRoute()
		v.host = host
		foreach backend in backends:
			v.addToBackends(backend)
		addToRules(v)
		return v
	}
}

prop uid as int = 5000
prop gid as int = 5000
prop maximumConnections as int = 4096
prop maximumBackendConnections as int = 1024
prop connectTimeout as int = 5
prop clientTimeout as int = 60
prop serverTimeout as int = 60
prop frontends as vector<Frontend>

func addToFrontends(frontend as Frontend)
{
	assert frontend
	if not frontends:
		frontends = new vector<Frontend>
	frontends += frontend
}

func addHttpListener(port as int) as Frontend
{
	var v = new Frontend()
	v.port = port
	addToFrontends(v)
	return v
}

func addHttpsListener(port as int, certificatePath as string) as Frontend
{
	var v = new Frontend()
	v.port = port
	v.certificatePath = certificatePath
	addToFrontends(v)
	return v
}

func generateConfigGlobal(sb as StringBuilder) private
{
	if sb.count() > 0:
		sb.appendString("\n")
	sb.appendString("global\n")
	sb.appendString("  log 127.0.0.1 local0\n")
	sb.appendString("  log 127.0.0.1 local1 notice\n")
	sb.appendString("  maxconn " .. String.forInteger(maximumConnections) .. "\n")
	sb.appendString("  tune.ssl.default-dh-param 2048\n")
	sb.appendString("  uid " .. String.forInteger(uid) .. "\n")
	sb.appendString("  gid " .. String.forInteger(gid) .. "\n")
}

func generateConfigDefaults(sb as StringBuilder) private
{
	if sb.count() > 0:
		sb.appendString("\n")
	sb.appendString("defaults\n")
	sb.appendString("  log global\n")
	sb.appendString("  option httplog\n")
	sb.appendString("  retries 3\n")
	sb.appendString("  timeout connect " .. String.forInteger(connectTimeout) .. "s\n")
	sb.appendString("  timeout client " .. String.forInteger(clientTimeout) .. "s\n")
	sb.appendString("  timeout server " .. String.forInteger(serverTimeout) .. "s\n")
}

func toRuleName(frontendName as string, hostName as string) private as string
{
	var sb = new StringBuilder()
	sb.appendString(frontendName)
	sb.appendCharacter('_')
	var it = String.iterate(hostName)
	while it {
		var c = it.getNextChar()
		if Character.isEOF(c):
			break
		if Character.isLowercaseAlpha(c) || Character.isDigit(c) {
			sb.appendCharacter(c)
		}
		else if Character.isUppercaseAlpha(c) {
			sb.appendCharacter(Character.toLowercase(c))
		}
		else {
			sb.appendCharacter('_')
		}
	}
	return sb.toString()
}

func generateConfigForFrontend(sb as StringBuilder, name as string, frontend as Frontend)
{
	if sb.count() > 0:
		sb.appendString("\n")
	sb.appendString("frontend " .. name .. "\n")
	sb.appendString("  mode http\n")
	if frontend.port > 0 {
		if String.isEmpty(frontend.certificatePath) {
			sb.appendString("  bind *:" .. String.forInteger(frontend.port) .. "\n")
		}
		else {
			sb.appendString("  bind *:" .. String.forInteger(frontend.port) .. " ssl crt " .. frontend.certificatePath .. "\n")
		}
	}

	// generate the acls and the rules

	foreach rule in frontend.rules {
		if rule is HostProxyRoute {
			var hpr = rule as! HostProxyRoute
			var ruleName = toRuleName(name, hpr.host)
			sb.appendString("  acl " .. ruleName .. " hdr(host) -i " .. hpr.host .. "\n")
			sb.appendString("  use_backend " .. ruleName .. "_backend if " .. ruleName .. "\n")
		}
		else {
			Error.throw("unsupportedRule", rule)
		}
	}

	// generate the backend declarations

	foreach rule in frontend.rules {
		if rule is HostProxyRoute {
			var hpr = rule as! HostProxyRoute
			var ruleName = toRuleName(name, hpr.host)
			sb.appendString("\nbackend " .. ruleName .. "_backend\n")
			sb.appendString("  mode http\n")
			sb.appendString("  balance roundrobin\n")
			sb.appendString("  option httpchk\n")
			var n = 1
			foreach backend in hpr.backends {
				sb.appendString("  server server" .. String.forInteger(n) .. " " .. backend .. " maxconn " .. String.forInteger(maximumBackendConnections) .. "\n")
				n ++
			}
		}
		else {
			Error.throw("unsupportedRule", rule)
		}
	}
}

func generateConfig as string
{
	var sb = new StringBuilder()
	generateConfigGlobal(sb)
	generateConfigDefaults(sb)
	var n = 1
	foreach frontend in frontends {
		var name = "frontend" .. String.forInteger(n)
		generateConfigForFrontend(sb, name, frontend)
		n ++
	}
	return sb.toString()
}

/*
global
  log 127.0.0.1   local0
  log 127.0.0.1   local1 notice
  maxconn 4096
  tune.ssl.default-dh-param 2048
  uid 5000
  gid 5000

defaults
  log global
  option httplog
  retries 3
  timeout connect 5s
  timeout client 60s
  timeout server 60s

frontend https
  bind *:443 ssl crt /usr/local/etc/haproxy/ssl
  mode http
  acl ewsy hdr(host) -i beta.eqela.com
  acl apiy hdr(host) -i apitest.eqela.com
#  acl idy hdr(host) -i id.eqela.com
#  acl dashboardapp hdr(host) -i dashboard.eqela.com
#  acl idapipath path_beg -i /api
#  acl idapi hdr(host) -i id.eqela.com
#  acl idstaticpath path_beg -i /#/
#  acl idstatic hdr(host) -i id.eqela.com
#  acl dashboard hdr(host) -i dashboard.eqela.com
#  acl profileapi hdr(host) -i api.eqela.com && path /profile
  use_backend api_id_0 if { path_beg /id/0/ }
  use_backend api_solution_0 if { path_beg /solution/0/ }
  use_backend api_script_0 if { path_beg /script/0/ }
#  use_backend api_geo_v1 if { path_beg /geo/v1/ }
#  use_backend api_spsy if { path_beg /spreadsheet/ }
#  use_backend api_notificationy if { path_beg /notification/ }
#  use_backend api_producty if { path_beg /product/ }
  use_backend api_uploady if { path_beg /code/ }
  use_backend samuel if { path_beg /bot/samuel/ }
#  use_backend idapi_backend if idapi idapipath
#  use_backend dashboardeqelacom_static if dashboard
#  use_backend ideqelacom_static if idstatic idstaticpath
#  use_backend profileapi_backend if profileapi
#  use_backend website_backend2 if ews_website
  use_backend apiy_backend if apiy
  use_backend ewsy_backend if ewsy
#  use_backend idy_backend if idy
#  use_backend dashboardapp_backend if dashboardapp

backend ewsy_backend
  mode http
  balance roundrobin
  option httpchk
  server server1 10.240.0.5:30005 maxconn 500

backend apiy_backend
  mode http
  balance roundrobin
  option httpchk
  server server1 10.240.0.5:30001 maxconn 500

backend api_id_0
  mode http
  balance roundrobin
  option httpchk
  http-request set-path "%[path,regsub(^/id/0/,/)]"
  server server1 10.240.0.10:5000 maxconn 500

backend api_solution_0
  mode http
  balance roundrobin
  option httpchk
  http-request set-path "%[path,regsub(^/solution/0/,/)]"
  server server1 10.240.0.10:5001 maxconn 500

backend api_script_0
  mode http
  balance roundrobin
  option httpchk
  http-request set-path "%[path,regsub(^/script/0/,/)]"
  server server1 10.240.0.10:5002 maxconn 500

backend samuel
  mode http
  balance roundrobin
  option httpchk
  http-request set-path "%[path,regsub(^/bot/samuel/,/)]"
  server server1 10.240.0.4:6000 maxconn 500

backend api_uploady
  mode http
  balance roundrobin
  option httpchk
  http-request set-path "%[path,regsub(^/code/,/)]"
  server server1 10.240.0.5:5007 maxconn 500
*/
