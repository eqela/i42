
/*
 * This file is part of i42
 * Copyright (c) 2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

prop client as AzureKeyVaultClient

ctor(client as AzureKeyVaultClient):
	this.client = client

func setSecretValue(name as string, value as string) async
{
	var vaultName = await client.getKeyVaultName()
	var tenantId = client.context.credentials.tenantId
	var objectId = await client.context.credentials.getCurrentUserObjectId()
	await client.addKeyVaultAccessPolicy(vaultName, tenantId, objectId, new vector<string>[], new vector<string>[], [ "set" ], new vector<string>[])
	await client.updateSecretInKeyVault(vaultName, name, value)
	await client.removeKeyVaultAccessPolicy(vaultName, tenantId, objectId, new vector<string>[], new vector<string>[], [ "set" ], new vector<string>[])
}

func getSecretValue(name as string) async as string
{
	var vaultName = await client.getKeyVaultName()
	var tenantId = client.context.credentials.tenantId
	var objectId = await client.context.credentials.getCurrentUserObjectId()
	await client.addKeyVaultAccessPolicy(vaultName, tenantId, objectId, new vector<string>[], new vector<string>[], [ "get" ], new vector<string>[])
	var v = await client.getSecretFromKeyVault(vaultName, name)
	await client.removeKeyVaultAccessPolicy(vaultName, tenantId, objectId, new vector<string>[], new vector<string>[], [ "get" ], new vector<string>[])
	return v
}
